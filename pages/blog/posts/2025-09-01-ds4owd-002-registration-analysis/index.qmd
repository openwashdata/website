---
title: "üåç Data Science for Open WASH Data: Building a Global Community!"
description: This blog post contains some insights into the registration of the Data Science for Open WASH Data course. At the moment, the data reveals a diverse global community. The report showcases participant demographics including strong African representation, female participation, varied educational backgrounds, and widespread interest in AI tools.
categories:
    - academy
    - open data
    - learning
    - data science
    - R
author: 
  - name: "Adriana Clavijo Daza"
    url: https://openwashdata.org/about/adriana/
    affiliation: Global Health Engineering, ETH Zurich
    affiliation_url: https://ghe.ethz.ch/
    orcid: 0009-0002-0589-2274
date: "2025-09-01"
draft: false
image: "OWD-logo-20.svg"
image-alt: "openwashdata logo"
---

```{r}
#| label: setup
#| include: false

# Set global options
knitr::opts_chunk$set(
  echo = FALSE,
  warning = FALSE,
  message = FALSE
)

# Load required libraries
library(tidyverse)
library(robotoolbox)
library(readxl)
library(labelled)
library(here)

# Define OWD color palette
owd_palette <- c("#5b195b", "#9b2c60", "#ce525b",
                 "#f08453", "#ffbd54", "#f9f871")

background_color <- "#f5f5f2"
```

```{r}
#| label: load-data

form_id <- "ashaEDvw4ZLwGi9bqXGeqb"
form_file <- here::here("pages/blog/posts/2025-09-01-ds4owd-002-registration-analysis/data/registration_form.xlsx")

# fetch data from Kobo with robotoolbox
raw_data <- kobo_data(x = form_id,
                      all_versions = TRUE)

# read in questionnaire and labels from XLS form 
questionnaire <- read_xlsx(form_file,
                           sheet = "survey")

label_dict <- read_xlsx(form_file,
                        sheet = "choices")
```

```{r}
#| label: data-processing
#| include: false

registration_data <- raw_data |> 
  select(github_username,
         gender,
         age_group,
         country_residence,
         education,
         employment_situation,
         org_type,
         prog_general,
         prog_r,
         prog_python,
         starts_with("llm_platforms")) |> 
  distinct(github_username, .keep_all = TRUE)

# starts_with("llm_") & !starts_with("llm_platforms")

# Country representation
country_labels <- label_dict |> 
  filter(list_name == "countries") |> 
  select(name, label)

country_counts <- registration_data |> 
  count(country_residence) |> 
  left_join(country_labels, 
            by = c("country_residence" = "name")) |> 
  mutate(country_name = coalesce(label, country_residence)) |> 
  arrange(desc(n))

# Gender representation
gender_counts <- registration_data |> 
  count(gender) |> 
  mutate(percent = round(n/sum(n) * 100))

woman_percent <- gender_counts |> 
  filter(gender == "woman") |> 
  pull(percent)

# R programming experience
prog_r_experience <- registration_data |> 
  count(prog_r) |> 
  left_join(label_dict |> 
            filter(list_name == "programming_exp") |> 
            select(name, label), 
            by = c("prog_r" = "name")) |> 
  mutate(experience_level = coalesce(label, prog_r),
         percent = round(n/sum(n) * 100))

r_beginners <- prog_r_experience |> 
  filter(prog_r %in% c("none", "few_lines")) |> 
  summarise(total_percent = sum(percent)) |> 
  pull(total_percent)

# Age diversity
age_range <- registration_data |> 
  count(age_group) |> 
  left_join(label_dict |> 
            filter(list_name == "list_age_group") |> 
            select(name, label), 
            by = c("age_group" = "name")) |> 
  mutate(age_label = coalesce(label, age_group))

most_common_age <- age_range |> 
  slice_max(n) |> 
  pull(age_label)

# Education level
education_high <- registration_data |> 
  count(education) |> 
  mutate(percent = round(n/sum(n) * 100)) |> 
  filter(education %in% c("master", "doctorate")) |> 
  summarise(total = sum(percent)) |> 
  pull(total)

# Employment situation
fulltime_percent <- registration_data |> 
  count(employment_situation) |> 
  mutate(percent = round(n/sum(n) * 100)) |> 
  filter(employment_situation == "employed_fulltime") |> 
  pull(percent)

# LLMs usage 
llm_platforms_summary <- registration_data |> 
  select(github_username, starts_with("llm_platforms_")) |>
    rename_with(~ sub("^llm_platforms_", "", .x), 
              starts_with("llm_platforms_")) |> 
  pivot_longer(-github_username, 
               names_to = "platform", # platform_var
               values_to = "use") |> # platform
  group_by(platform) |> 
  summarise(n = sum(use)) |> 
  ungroup() |> 
  left_join(label_dict |> 
            filter(list_name == "llm_tools") |> 
            select(name, label), 
            by = c("platform" = "name")) |> 
  mutate(platform_label = coalesce(label, platform),
         platform_label_clean = str_remove(platform_label, "\\s*\\(.*\\)"),
         rank = min_rank(desc(n))) |> 
  arrange(desc(n))

top_llm_tools <- paste(head(llm_platforms_summary$platform_label_clean, 3), collapse = ", ")

llm_users_percent <- round(sum(!is.na(registration_data$llm_platforms)) / nrow(registration_data) * 100)
```

We're thrilled to have **`r nrow(registration_data)` registrations** so far from passionate learners worldwide who are ready to transform water, sanitation, and hygiene data into actionable insights! üìä

```{r}
#| label: plot-country

# Get country data with labels
country_df <- registration_data |> 
  count(country_residence) |> 
  left_join(country_labels, by = c("country_residence" = "name")) |> 
  mutate(country_name = coalesce(label, country_residence),
         rank = min_rank(desc(n))) |> 
  filter(rank <= 10)
  
plot_country <- country_df |> 
  ggplot(aes(x = reorder(country_name, n), y = n)) +
  geom_col(fill = owd_palette[1]) +
  geom_text(aes(label = n), hjust = -0.2, size = 3.5, fontface = "bold") +
  coord_flip() +
  labs(x = "Country", 
       y = "Number of registrations", 
       title = "Top 10 Countries") +
  theme_minimal() +
  theme(plot.background = element_rect(fill = background_color, color = NA),
        panel.background = element_rect(fill = background_color, color = NA)) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.15)))

print(plot_country)
```

**üó∫ Global reach, diverse perspectives:** Our participants span continents, with African countries leading the way. We have `r country_counts$n[1]` registrations from `r country_counts$country_name[1]`, followed by strong representation from `r country_counts$country_name[2]` (`r country_counts$n[2]` registrations), `r country_counts$country_name[3]` (`r country_counts$n[3]` registrations) and `r country_counts$country_name[4]` (`r country_counts$n[4]` registrations). Also very exciting to see a strong female participation with `r woman_percent`% of the registrations. You're creating an inclusive learning environment where diverse voices will enrich our experience. ü§ù

```{r}
#| label: plot-population-pyramid
#| fig-width: 8
#| fig-height: 6

# Age and gender labels
age_labels <- label_dict |> 
  filter(list_name == "list_age_group") |> 
  select(name, label)

gender_labels <- label_dict |> 
  filter(list_name == "list_gender") |> 
  select(name, label)

# Population pyramid data
# the two groups corresponding to older ages were merged due to low occurence
pyramid_data <- registration_data |> 
  filter(age_group != "prefer_not_to_say_age",
         gender %in% c("man", "woman")) |> 
  mutate(age_group = case_when(
    age_group %in% c("55_64", "65_or_older") ~ "55_older",
    TRUE ~ age_group
  )) |> 
  count(age_group, gender) |> 
  left_join(age_labels, by = c("age_group" = "name")) |> 
  left_join(gender_labels, by = c("gender" = "name")) |> 
  mutate(age_label = case_when(
    age_group == "55_older" ~ "55 or older",
    TRUE ~ coalesce(label.x, age_group)
  ),
         gender_label = coalesce(label.y, gender),
         n_adjusted = ifelse(gender == "man", -n, n))

# Create population pyramid
plot_pyramid <- pyramid_data |> 
  ggplot(aes(x = age_label, y = n_adjusted, fill = gender_label)) +
  geom_col(width = 0.8) +
  geom_label(aes(label = abs(n_adjusted), 
                y = n_adjusted + ifelse(gender == "man", -0.5, 0.5)), 
            size = 3.5, fontface = "bold", fill = "lightgrey") +
  coord_flip() +
  scale_y_continuous(labels = function(x) abs(x),
                     expand = expansion(mult = c(0.15, 0.15))) +
  scale_fill_manual(values = c("Man" = owd_palette[1], 
                               "Woman" = owd_palette[3])) +
  labs(x = "Age Group", 
       y = "Number of registrations", 
       fill = "",
       title = "Age Distribution by Gender") +
  theme_minimal() +
  theme(legend.position = "bottom",
        plot.title = element_text(hjust = 0.5),
        plot.background = element_rect(fill = background_color, color = NA),
        panel.background = element_rect(fill = background_color, color = NA))

print(plot_pyramid)
```

**üìö Meeting learners at every level:** While `r education_high`% of participants hold advanced degrees and `r fulltime_percent`% are employed full-time, `r r_beginners`% are beginners in R programming. This mix creates a unique learning environment where everyone brings valuable perspectives. Whether you're taking your first steps in coding or bringing years of WASH expertise we're ready to support you in this path of adding data science to your toolkit. üíª‚ú®

```{r}
#| label: plot-education-employment
#| layout-ncol: 2
#| fig-width: 6
#| fig-height: 5
#| include: false

# Get education labels and remove text in parentheses, add line breaks
education_labels <- label_dict |> 
  filter(list_name == "education_level") |> 
  select(name, label) |> 
  mutate(label = str_remove(label, "\\s*\\(.*\\)"),
         label = case_when(
           str_detect(label, "No formal") ~ "No formal\neducation",
           str_detect(label, "Primary") ~ "Primary\neducation",
           str_detect(label, "Lower secondary") ~ "Lower secondary\neducation",
           str_detect(label, "Upper secondary") ~ "Upper secondary\neducation",
           str_detect(label, "Postsecondary non-tertiary") ~ "Postsecondary\nnon-tertiary",
           str_detect(label, "Bachelor") ~ "Bachelor's\ndegree",
           str_detect(label, "Master") ~ "Master's\ndegree",
           str_detect(label, "Doctorate") ~ "Doctorate\nor higher",
           TRUE ~ label
         ))

plot_education <- registration_data |> 
  count(education) |> 
  left_join(education_labels, by = c("education" = "name")) |> 
  mutate(education_label = coalesce(label, education)) |> 
  ggplot(aes(x = reorder(education_label, n), y = n)) +
  geom_col(fill = owd_palette[4]) +
  geom_text(aes(label = n), hjust = -0.2, size = 3.5, fontface = "bold") +
  coord_flip() +
  labs(x = "", y = "Number of registrations", title = "Education Level") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 11),
        plot.background = element_rect(fill = background_color, color = NA),
        panel.background = element_rect(fill = background_color, color = NA)) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.15)))

# Get employment situation labels and add line breaks
employment_labels <- label_dict |> 
  filter(list_name == "employment_status") |> 
  select(name, label) |> 
  mutate(label = case_when(
    str_detect(label, "Employed full-time") ~ "Employed\nfull-time",
    str_detect(label, "Employed part-time") ~ "Employed\npart-time",
    str_detect(label, "Unemployed and looking") ~ "Unemployed and\nlooking for work",
    str_detect(label, "Unemployed and not") ~ "Unemployed and\nnot looking for work",
    TRUE ~ label
  ))

# Process employment data: collapse unemployed categories, then small categories
employment_data <- registration_data |> 
  count(employment_situation) |> 
  left_join(employment_labels, by = c("employment_situation" = "name")) |> 
  mutate(employment_label = coalesce(label, employment_situation),
         # First collapse unemployed categories
         employment_collapsed = case_when(
           str_detect(employment_situation, "unemployed") ~ "Unemployed",
           TRUE ~ employment_label
         )) |> 
  # Group by collapsed categories and sum counts
  group_by(employment_collapsed) |> 
  summarise(n = sum(n)) |> 
  ungroup() |> 
  # Then collapse categories with count < 2 into Other
  mutate(employment_final = ifelse(n < 2, "Other", employment_collapsed)) |> 
  group_by(employment_final) |> 
  summarise(n = sum(n)) |> 
  ungroup()

plot_employment <- employment_data |> 
  ggplot(aes(x = reorder(employment_final, n), y = n)) +
  geom_col(fill = owd_palette[5]) +
  geom_text(aes(label = n), hjust = -0.2, size = 3.5, fontface = "bold") +
  coord_flip() +
  labs(x = "", y = "Number of registrations", title = "Employment Situation") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 11),
        plot.background = element_rect(fill = background_color, color = NA),
        panel.background = element_rect(fill = background_color, color = NA)) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.15)))

print(plot_education)
print(plot_employment)
```


```{r}
#| label: plot-education-stacked
#| fig-height: 3
#| fig-width: 10

# Modified labels for improve readability in plots
education_labels <- label_dict |> 
  filter(list_name == "education_level") |> 
  select(name, label) |> 
  mutate(label = str_remove(label, "\\s*\\(.*\\)"),
         label = case_when(
           str_detect(label, "No formal") ~ "No formal\neducation",
           str_detect(label, "Primary") ~ "Primary\neducation",
           str_detect(label, "Lower secondary") ~ "Lower secondary\neducation",
           str_detect(label, "Upper secondary") ~ "Upper secondary\neducation",
           str_detect(label, "Postsecondary non-tertiary") ~ "Postsecondary\nnon-tertiary",
           str_detect(label, "Bachelor") ~ "Bachelor's\ndegree",
           str_detect(label, "Master") ~ "Master's\ndegree",
           str_detect(label, "Doctorate") ~ "Doctorate\nor higher",
           TRUE ~ label
         ))

# Dataframe for stacked horizontal bar
education_stacked_data <- registration_data |> 
  count(education) |> 
  left_join(education_labels, by = c("education" = "name")) |> 
  mutate(education_label = coalesce(label, education),
         education_final = if_else(n < 5, "Other", education_label)) |> 
  group_by(education_final) |> 
  summarise(n = sum(n)) |> 
  ungroup() |> 
  arrange(desc(n)) |> 
  mutate(education_final = factor(education_final, levels = rev(education_final))) |> 
  mutate(percent = round(n/sum(n) * 100),
         label_text = paste0(education_final, "\n(", percent, "%)"))

# Stacked horizontal bar
plot_education_stacked <- education_stacked_data |> 
  ggplot(aes(x = "", y = n, fill = education_final)) +
  geom_col(width = 0.3) +
  geom_text(aes(label = label_text), 
            position = position_stack(vjust = 0.5), 
            size = 4, 
            fontface = "bold",
            color = "black",
            lineheight = 0.9) +
  coord_flip() +
  labs(x = "", 
       y = "", 
       title = "Education Level Distribution") +
  theme_void() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5, size = 16, margin = margin(b = -100, t = 20)),
        plot.margin = margin(b = -100),
        plot.background = element_rect(fill = background_color, color = NA)) +
  scale_fill_manual(values = owd_palette[3:(length(unique(education_stacked_data$education_final))+2)])

print(plot_education_stacked)
```

```{r}
#| label: plot-employment-stacked
#| fig-height: 3
#| fig-width: 10

# Modified labels for improve readability in plots
employment_labels <- label_dict |> 
  filter(list_name == "employment_status") |> 
  select(name, label) |> 
  mutate(label = case_when(
    str_detect(label, "Employed full-time") ~ "Employed\nfull-time",
    str_detect(label, "Employed part-time") ~ "Employed\npart-time",
    str_detect(label, "Unemployed and looking") ~ "Unemployed and\nlooking for work",
    str_detect(label, "Unemployed and not") ~ "Unemployed and\nnot looking for work",
    TRUE ~ label
  ))

# Dataframe for stacked horizontal bar
employment_stacked_data <- registration_data |> 
  count(employment_situation) |> 
  left_join(employment_labels, by = c("employment_situation" = "name")) |> 
  mutate(employment_label = coalesce(label, employment_situation),
         employment_collapsed = case_when(
           str_detect(employment_situation, "unemployed") ~ "Unemployed",
           TRUE ~ employment_label
         )) |> 
  group_by(employment_collapsed) |> 
  summarise(n = sum(n)) |> 
  ungroup() |> 
  mutate(employment_final = ifelse(n < 10, "Other", employment_collapsed)) |> 
  group_by(employment_final) |> 
  summarise(n = sum(n)) |> 
  ungroup() |> 
  arrange(desc(n)) |> 
  mutate(employment_final = factor(employment_final, levels = rev(employment_final))) |> 
  mutate(percent = round(n/sum(n) * 100),
         label_text = paste0(employment_final, "\n(", percent, "%)"))

# Stacked horizontal bar
plot_employment_stacked <- employment_stacked_data |> 
  ggplot(aes(x = "", y = n, fill = employment_final)) +
  geom_col(width = 0.3) +
  geom_text(aes(label = label_text), 
            position = position_stack(vjust = 0.5), 
            size = 4, 
            fontface = "bold",
            color = "black",
            lineheight = 0.9) +
  coord_flip() +
  labs(x = "", 
       y = "", 
       title = "Employment Situation Distribution") +
  theme_void() +
  theme(legend.position = "none",
        plot.title = element_text(hjust = 0.5, size = 16, margin = margin(b = -100, t = 0)),
        plot.margin = margin(b = -100),
        plot.background = element_rect(fill = background_color, color = NA)) +
  scale_fill_manual(values = owd_palette[2:(length(unique(employment_stacked_data$employment_final))+2)])

print(plot_employment_stacked)
```

```{r}
#| label: plot-programming-skills
#| fig-height: 6

# Get programming level labels and add line breaks
prog_labels <- label_dict |> 
  filter(list_name == "programming_exp") |> 
  select(name, label) |> 
  mutate(label = case_when(
    str_detect(label, "I have written a few") ~ "I have written\na few lines",
    str_detect(label, "I have written programs") ~ "I have written\nprograms for own use",
    str_detect(label, "I have written and maintained") ~ "I have written and\nmaintained larger software",
    TRUE ~ label
  ))

# Combine programming experience variables
prog_data <- registration_data |> 
  select(prog_general, prog_r, prog_python) |> 
  pivot_longer(everything(), 
               names_to = "skill_type", 
               values_to = "level") |> 
  left_join(prog_labels, by = c("level" = "name")) |> 
  mutate(level_label = coalesce(label, level),
         skill_type = case_when(
           skill_type == "prog_general" ~ "General",
           skill_type == "prog_r" ~ "R",
           skill_type == "prog_python" ~ "Python"
         ))

plot_programming <- prog_data |> 
  count(skill_type, level_label) |> 
  ggplot(aes(x = reorder(level_label, n), y = n, fill = skill_type)) +
  geom_col(position = "dodge") +
  geom_text(aes(label = n), position = position_dodge(width = 0.9), hjust = -0.2, size = 3, fontface = "bold") +
  coord_flip() +
  labs(x = "Experience Level", y = "Count", fill = "", title = "Programming experience") +
  theme_minimal() +
  theme(legend.position = "bottom",
        plot.background = element_rect(fill = background_color, color = NA),
        panel.background = element_rect(fill = background_color, color = NA)) +
  scale_fill_manual(values = owd_palette[1:3]) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.15)))

print(plot_programming)
```

**ü§ñ AI-powered learning:** With `r llm_users_percent`% of participants already using AI tools (most popular: `r top_llm_tools`), we're excited to include our bonus module: **"Use of AI for coding support"**. This module will help all participants - from beginners to experienced coders - leverage AI tools effectively and responsibly in their data science journey.

```{r}
#| label: plot-llm-platforms
#| fig-height: 6

# Count and plot platform usage - top 10 with ties
plot_llm_platforms <- llm_platforms_summary |> 
  filter(rank <= 10) |>  # This will include ties at rank 10
  ggplot(aes(x = reorder(platform_label, n), y = n)) +
  geom_col(fill = owd_palette[2]) +
  geom_text(aes(label = n), hjust = -0.2, size = 3.5, fontface = "bold") +
  coord_flip() +
  labs(x = "LLM Platform", y = "Number of Users",
       title = "Top 10 LLM Platforms Used by Participants") +
  theme_minimal() +
  theme(plot.background = element_rect(fill = background_color, color = NA),
        panel.background = element_rect(fill = background_color, color = NA)) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.15)))

print(plot_llm_platforms)
```

Join this vibrant community committed to using data science for open research and data. Together, we're building the knowledge to tackle water and sanitation challenges. üåä

Visit the [course website](https://ds4owd-002.github.io/website/) if you are interested in learning more about the contents and structure. Registrations are still open: [https://ee-eu.kobotoolbox.org/single/7V3qeDYD]()
