---
title: "openwashdata Data Package Hackathon"
description: |
  TODO
bibliography: ../../../references.bib
execute:
    echo: false
    warning: false
editor_options: 
  chunk_output_type: console
  markdown: 
    wrap: 72
---

## üëã Welcome

## üìÜ Event Details

-   **Date:** Friday, June 21, 9:00 AM - 4:30 PM (CET)

## üìù Agenda

-   in preparation

```{r}
#| tbl-colwidths: [15, 35, 15, 45]
#| column: page
#| eval: true

agenda <- readr::read_csv(here::here("pages/events/2024-06-21-hackathon/data/hackathon-agenda.csv"))

agenda |> 
    dplyr::select(time, title, remark) |> 
    dplyr::rename_with(~stringr::str_to_title(.x), everything()) |> 
    knitr::kable()
    
```

## üñºÔ∏è Slides

[View slides in full screen]() \| [Download slides as PDF]()

```{=html}
<iframe class="slide-deck" src="" height="420" width="747" style="border: 1px solid #123233;"></iframe>
```
## üßë‚Äçüíª Workflow

### Initialize package repository

1.  **Open GitHub**

    1.  Accept the GitHub invitation to contribute

2.  **Open RStudio IDE**

    1.  Check if R Packages `devtools` and `usethis` are installed.
        Otherwise, in console, run
        `install.packages(c("devtools", "usethis"))`.

    2.  Install `washr` R package, in console, run:

        ``` r
        library(devtools)
        devtools::install_github("openwashdata-dev/washr")
        ```

3.  Create a new project following:

    -   File -\> New Project -\> New Directory -\> **R Package using
        devtools**
        -   Scroll down, this option is usually at bottom
    -   Copy-and-paste assigned GitHub repo name as the directory name
    -   Choose a location of sub-directory

4.  Load required libraries:

    -   `library(washr)`

    -   `library(usethis)`

5.  Set up Git version control and connect to GitHub #TODO

6.  Add git version control to local directory, in console, run

    \- `use_git()`

    \- yes, commit

    \- yes, restart

7.  Open **Terminal** (the tab next to Console), connect remote
    repository on GitHub with local repository. Run the following
    commands line by line

    -   `git remote add origin URL`
    -   `git branch -M main`
    -   `git push -u origin main`

### Create Dataset

#### Data Processing

1.  Add directory for raw data to project
    -   In Console, execute `setup_rawdata()`
    -   Add, commit and push all changes to GitHub
        -   Select "Git" tab on the top-right panel
        -   (Click "Pull" first for good practice)
        -   Tick all files and click Commit
        -   Enter a commit message and click "push"
    -   \[Insert a screenshot here\]
2.  Move raw data files to the directory `data-raw`
3.  **Work on `data-raw/data_processing.R` to clean raw data and export
    tidy data.**
    -   You may need to modify or delete some code in
        `data_processing.R`
4.  Export the tidy data by executing your finalized `data_processing.R`

#### Dictionary

1.  Once data reaches tidy state, in console, execute
    `setup_dictionary()`
    -   Go to `data-raw/dictionary.csv`
    -   Fill the column "description" in `dictionary.csv` for each
        dataset and variable
2.  Add, commit and push all changes to GitHub:

### Document Dataset

#### Roxygen

1.  Initiate and write documentation in `R/` folder by executing in
    console: `setup_roxygen()`
    -   Open each documentation file in `R/` to write a human-readable
        title and description about the dataset
2.  Add, commit and push all changes to GitHub
3.  Use `devtools` to document, check and install the package
    -   `devtools::document()`

    -   `devtools::check()`

    -   `devtools::install()`

        If there is any error or warning, please let me know and we can
        look together.

#### DESCRIPTION

1.  Add yourself as the creator and author of the package

```{r eval = FALSE, echo = TRUE}
use_author(given = "First Name", family = "Last Name", 
           role = c("aut", "cre"), email = "Your email",
           comment = c(ORCID = "XXXX-XXXX-XXXX-XXXX"))
```

2.  On GitHub, create an issue with details to write up author
    information for `DESCRIPTION` file

    -   Contributors (name, email, role, ORCID)
        -   Include everyone here
            -   Roles
                -   cre = maintainer
                -   aut = significant contributions
                -   ctb = contributor with smaller contributions
    -   Add other author(s):

    ```{r eval=F, echo=T}
    use_author(given = "Second Author", family = "Second Author", role = "aut")
    ```

3.  Complete `DESCRIPTION` file by ruuning: `update_description()`

4.  Use `devtools` to document, check and install the package

    -   `devtools::document()`

    -   `devtools::check()`

    -   `devtools::install()`

        If there is any error or warning, please let me know and we can
        look together.

### Communicate Dataset

#### README

1.  In console, execute `setup_readme()`.
    -   Optionally, enable `has_example=TRUE` to create an example
        article for the package.
2.  Open `README.Rmd` and edit the sections.
    -   **Make at least one plot about the data in the section
        "Example"**
3.  Once you finish writing `README.Rmd`, run `build_readme()`.
4.  Add, commit and push all changes to GitHub

#### Pkgdown Website

2.  In console, run `setup_website()` to create an openwashdata style
    pkgdown website
3.  Use `devtools` to document, check and install the package
    -   `devtools::document()`

    -   `devtools::check()`

    -   `devtools::install()`

        If there is any error or warning, please let me know and we can
        look together.
4.  Add, commit and push all changes to GitHub

### Resources

-   Use keyboard shortcuts
