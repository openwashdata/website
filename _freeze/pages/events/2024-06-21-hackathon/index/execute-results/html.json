{
  "hash": "9ad7b158100bc1e4c280c5e0c269554f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"openwashdata Data Package Hackathon\"\ndescription: |\n  This hackathon is hosted by the Global Health Engineering group at ETH Zurich. Participants will develop an openwashdata R data package with washr package.\nexecute:\n    echo: false\n    warning: false\neditor_options: \n  chunk_output_type: console\n  markdown: \n    wrap: 72\n---\n\n\n## üéØ Objectives\n\n-   Deliver publishable openwashdata data packages\n-   Beta-test the `washr` R package to receive feedback for the package\n    release\n-   Meet openwashdata friends and have fun\n\n## üìÜ Event Details\n\n-   **Date:** Friday, June 21, 9:00 AM - 4:30 PM (CET)\n-   **Location:** Location: Zurich, Switzerland\n\n## üìù Agenda\n\n\n::: {.cell .column-page tbl-colwidths='[15,35,15,45]'}\n::: {.cell-output-display}\n\n\n|Time          |Title                                     |Remark                         |\n|:-------------|:-----------------------------------------|:------------------------------|\n|08:30 - 09:00 |Check in & Breakfast                      |                               |\n|09:00 - 09:05 |Opening                                   |                               |\n|09:05 - 09:50 |Introduction workshop for washr R package |                               |\n|10:00 - 12:00 |Coding                                    |Package Setup & Data Cleaning  |\n|12:00 - 12:40 |Lunch                                     |                               |\n|12:45 - 14:45 |Coding                                    |Data Cleaning & README writing |\n|14:45 - 15:00 |Break / Stretch                           |                               |\n|15:00 - 15:30 |Final Polish                              |Write Feedback Survey          |\n|15:30 - 16:15 |Showcase                                  |                               |\n|16:25 - 16:30 |Closing                                   |                               |\n\n\n:::\n:::\n\n\n## üñºÔ∏è Slides\n\n[View slides in full screen](../../gallery/slides/hackathon-2024/) ÔΩú\n[Download slides as\nPDF](https://github.com/openwashdata/website/raw/main/pages/gallery/slides/hackathon-2024/openwashdata-data-package-hackathon.pdf)\n\n\n```{=html}\n<iframe class=\"slide-deck\" src=\"../../gallery/slides/hackathon-2024/\" height=\"420\" width=\"747\" style=\"border: 1px solid #123233;\"></iframe>\n```\n\n## üßë‚Äçüíª Workflow\n\n### Initialize package repository\n\n1.  **Open GitHub**\n\n    -   [ ] 1. Open your invitation email from GitHub, follow the link,\n        and accept the GitHub invitation to contribute\n\n2.  **Open RStudio IDE**\n\n    -   [ ] 1. Check if R Packages `devtools` and `usethis` are\n        installed. Otherwise, in console, run\n        `install.packages(c(\"devtools\", \"usethis\"))`.\n\n    -   [ ] 2. Install `washr` R package, in console, run:\n\n        ``` r\n        library(devtools)\n        devtools::install_github(\"openwashdata-dev/washr\")\n        ```\n\n        You might encounter a message to update packages, choose the\n        option \"All\" to continue.\n\n        ![](figure/pkg_update.png)\n\n3.  Create a new project following:\n\n    -   [ ] File -\\> New Project -\\> New Directory -\\> **R Package using\n        devtools**\n        -   Scroll down, this option is usually at bottom\n\n            ![](figure/create_pkg_with_devtools.png)\n    -   [ ] Copy-and-paste assigned GitHub repo name as the directory\n        name\n    -   [ ] Choose a location of sub-directory\n\n4.  Load required libraries:\n\n    -   [ ] `library(washr)`\n\n    -   [ ] `library(devtools)`\n\n    -   [ ] `library(usethis)`\n\n5.  Configure Git version control on your local computer.\n\n    -   [ ] In console, run:\n\n    ``` r\n    use_git_config(user.name = \"Your Name\", user.email = \"Your GitHub Email\")\n    ```\n\n6.  Add git version control to local directory, in console, run\n\n    -   [ ] `use_git()`\n\n    -   yes, commit\n\n    -   yes, restart\n\n7.  Connect local computer with GitHub, please refer to\n    <https://happygitwithr.com/https-pat.html> for more details.\n\n    -   [ ] In Console, run\n\n        ```         \n        usethis::create_github_token()\n        ```\n\n    -   [ ] Click ‚ÄúGenerate token‚Äù.\n\n    -   [ ] Copy the generated PAT to your clipboard. Or leave that\n        browser window open and available for a little while, so you can\n        come back to copy the PAT. You will need the PAT in the next\n        step.\n\n        -   [ ] Please consider to store the PAT securely, e.g., a\n            password manager. You may store it by following the steps\n            [here](https://happygitwithr.com/https-pat#tldr) .\n\n8.  Open **Terminal** (the tab next to Console), run commands suggested\n    in your assigned GitHub repository. The commands should look like\n    the following:\n\n    ``` bash\n    # Change the url link to be your assigned GitHub repo\n    git remote add origin \"https://github.com/openwashdata/fssample.git\" \n\n    git branch -M main\n\n    git push -u origin main\n    ```\n\n    -   You can find and copy the commands in your assigned repo too:\n\n        ![](figure/connect_github.png)\n\n    -   If this is your FIRST TIME connecting RStudio with GitHub, you\n        will receive a message in the Terminal to log in. Enter your\n        GitHub username, and for the password, copy-and-paste the PAT\n        token generated from Step 7 (`ghp_xxxxxxxxxxxxxxxxxxxx`)\n\n        ![](figure/connect_github_rstudio.JPG)\n\n### Create Dataset\n\n#### Data Processing\n\n1.  Add directory for raw data to project\n    -   In Console, execute `setup_rawdata()`\n2.  Move raw data files to the directory `data-raw`\n    -   Add, commit and push all changes to GitHub\n\n        -   Select \"Git\" tab on the top-right panel\n        -   (Click \"Pull\" first for good practice)\n        -   Tick all files and click Commit\n        -   Enter a commit message and click\n            \"push\"![](figure/commit_msg.png)\n\n        ![](figure/git_panel.png)\n3.  **Work on `data-raw/data_processing.R` to clean raw data and export\n    tidy data.**\n    -   You may need to modify or delete some code in\n        `data_processing.R`\n4.  Export the tidy data by executing the whole `data_processing.R`\n    -   Add, commit and push all changes to GitHub\n\n#### Dictionary\n\n1.  Once data reaches tidy state, in console, execute\n    `setup_dictionary()`\n    -   Go to `data-raw/dictionary.csv`\n    -   Fill the column \"description\" in `dictionary.csv` for each\n        dataset and variable\n        -   It might be easier to edit in a spreadsheet software (e.g.\n            Excel)\n    -   Save `dictionary.csv`\n2.  Add, commit and push all changes to GitHub:\n\n### Document Dataset\n\n#### Roxygen\n\n1.  Initiate and write documentation in `R/` folder by executing in\n    console: `setup_roxygen()`\n    -   Open each documentation file in `R/` to write a human-readable\n        title and description about the dataset\n\n        ![](figure/write_dict.gif)\n2.  Add, commit and push all changes to GitHub\n3.  Use `devtools` to document, check and install the package\n    -   `devtools::document()`\n\n    -   `devtools::check()`\n\n    -   `devtools::install()`\n\n        If there is any error or warning, please let me know and we can\n        look together. You will have a warning message about license\n        which will be addressed in the next step.\n\n#### DESCRIPTION\n\n1.  Add yourself as the creator and author of the package\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuse_author(given = \"First Name\", family = \"Last Name\", \n           role = c(\"aut\", \"cre\"), email = \"Your email\",\n           comment = c(ORCID = \"XXXX-XXXX-XXXX-XXXX\"))\n```\n:::\n\n\n2.  On GitHub, create an issue with details to write up author\n    information for `DESCRIPTION` file\n\n    -   Contributors (name, email, role, ORCID)\n        -   Include everyone here\n            -   Roles\n                -   cre = maintainer\n                -   aut = significant contributions\n                -   ctb = contributor with smaller contributions\n    -   Add other author(s):\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    use_author(given = \"Second Author\", family = \"Second Author\", role = \"aut\")\n    ```\n    :::\n\n\n3.  Go to `DESCRIPTION` file, write the `Title` and `Description` about\n    the package. Then, in console, run: `update_description()` to update\n    other fields. Proof-read the `DESCRIPTION` file to make sure that\n    the fields are correct.\n\n4.  Use `devtools` to document, check and install the package\n\n    -   `devtools::document()`\n\n    -   `devtools::check()`\n\n    -   `devtools::install()`\n\n        If there is any error or warning, please let me know and we can\n        look together.\n\n### Communicate Dataset\n\n#### README\n\n1.  In console, execute `setup_readme()`.\n    -   If you are not tight on time, optionally, enable\n        `has_example=TRUE` to create an example article for the package.\n2.  Open `README.Rmd` and edit the sections.\n    -   **Make at least one plot about the data in the section\n        \"Example\"**\n3.  Once you finish writing `README.Rmd`, run `build_readme()`.\n4.  Add, commit and push all changes to GitHub\n\n#### Pkgdown Website\n\n2.  In console, run `setup_website()` to create an openwashdata style\n    pkgdown website\n    -   Select \"No\" option to not override the `_pkgdown.yml` in the\n        console\n\n        ![](figure/no_override_pkgdown.png)\n3.  Use `devtools` to document, check and install the package\n    -   `devtools::document()`\n\n    -   `devtools::check()`\n\n    -   `devtools::install()`\n\n        If there is any error or warning, please let me know and we can\n        look together.\n4.  Open `.gitignore`, remove `docs`, and save the file.\n5.  Add, commit and push all changes to GitHub\n\n### \n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}